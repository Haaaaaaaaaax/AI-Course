Task 1: what is the difference between system testing, dependence testing, white box testing and unit testing?
1-Unit Testing:
               -Focus: Unit testing is the smallest level of testing and involves testing individual components or units of code in isolation.
               -Scope: It is performed by developers and aims to validate that each unit of the software performs as designed.
               -Approach: White-box testing is commonly used for unit testing, where the internal structure, logic, and code paths of the individual units are examined.

2-White-Box Testing:
                    -Focus: White-box testing, also known as clear-box or structural testing, focuses on the internal logic and structure of the code.
                    -Scope: It involves testing the internal workings of the software, including code paths, algorithms, and data flow.
                    -Approach: Testers have knowledge of the internal structure of the code, and test cases are designed based on the code's logic. It is commonly used at the unit testing level.

3-Dependency Testing:
                     -Focus: Dependency testing checks how well the software handles external dependencies such as databases, external services, or APIs.
                     -Scope: It assesses the impact of changes in one module or system on other modules or systems.
                     -Approach: It aims to ensure that the software works seamlessly with its external dependencies, and it can be performed at various levels of testing, including integration testing and system testing.

4-System Testing:
                 -Focus: System testing evaluates the entire system as a whole to ensure that all components work together as intended.
                 -Scope: It involves testing the complete, integrated system to verify that it meets specified requirements.
                 -Approach: It is a black-box testing technique, focusing on the system's external behavior without knowledge of its internal implementation details.

Task 2: What is the diffrence between SQL injection, Dependency injection and code injection?
1-SQL Injection:
                -Purpose: SQL injection is a type of security vulnerability that occurs when an attacker is able to manipulate an application's SQL query by injecting malicious SQL code.
                -Concern: It is a security issue where an attacker can manipulate or modify a database query to gain unauthorized access, retrieve, modify, or delete data.

2-Dependency Injection:
                       -Purpose: Dependency injection is a design pattern used in software development to achieve inversion of control (IoC) by injecting dependencies from the outside rather than creating them within a class.
                       -Concern: It addresses the management of object dependencies and improves modularity and testability of the code.

3-Code Injection:
                 -Purpose: Code injection refers to the unauthorized insertion or manipulation of code within an application.
                 -Concern: It is a broad term that encompasses various types of injections, including SQL injection and other types of attacks where external code is injected and executed.

Task 3: what is the complexity of all data structures?
There are two types of complexity,
1- Time complexity: It is defined as the number of times a particular instruction set is executed rather than the total time taken. It is because the total time taken also depends on some external factors like the compiler used, the processorâ€™s speed, etc.
2- space complexity: It is the total memory space required by the program for its execution.
Here's a brief overview of the complexities for common data structures:
1-Arrays:
         -Access: O(1)
         -Search: O(n)
         -Insertion/Deletion at the end: O(1)
         -Insertion/Deletion in the middle: O(n)

2-Linked Lists:
               -Access: O(n)
               -Search: O(n)
               -Insertion/Deletion at the beginning: O(1)
               -Insertion/Deletion at the end (with tail pointer): O(1)
               -Insertion/Deletion in the middle: O(n)

3-Stacks:
         -Push/Pop: O(1)

4-Queues:
         -Enqueue/Dequeue: O(1)

5- Hash Tables:
               -Average-case for Search/Insert/Delete: O(1)
               -In the worst case, it could be O(n), but this is rare with good hash functions and handling collisions.

6-Trees:
        -Binary Search Tree (BST) operations (average):
        -Search: O(log n)
        -Insertion: O(log n)
        -Deletion: O(log n)
        -AVL Tree or Red-Black Tree operations:
        -Search: O(log n)
        -Insertion: O(log n)
        -Deletion: O(log n)

7-Heaps:
        -Insertion: O(log n)
        -Extraction of the minimum/maximum: O(log n)

8-Graphs:
         --Adjacency Matrix:
          -Space: O(V^2)
          -Checking if there is an edge between two nodes: O(1)
         --Adjacency List:
          -Space: O(V + E)
          -Checking if there is an edge between two nodes: O(degree of the node)
Here is a link that u can see all best cases, average cases and worst cases complexity: https://www.geeksforgeeks.org/time-complexities-of-different-data-structures/


Task4: what is the use of multi-map?
multi-map can be used in real-life for:
                                       1-Bus Routes and Stops: Mapping bus routes to multiple stops along the way.
                                       2-Event Scheduling: Associating a date with a list of events happening on that day.
                                       3-Social Networks: Connecting users to multiple friends or groups they belong to.
                                       4-Inventory Management: Tracking multiple items stored at the same location or with the same identifier.


Task 5: 
