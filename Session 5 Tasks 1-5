Task 1: what is scheduling algorithms and how it works?
Scheduling algorithms are a fundamental concept in computer science and operating systems.
They are used to manage the allocation of resources, such as CPU time, to various tasks or processes in a multitasking or multiprogramming environment.
The primary goal of scheduling algorithms is to optimize the use of available resources, ensuring that tasks are executed efficiently, fairly, and in a manner that meets specific performance criteria.

and this is how it works:
1-Task Queue: In a multitasking environment, there is typically a queue or list of tasks or processes that need to be executed.
  This queue may contain a mixture of foreground and background tasks, each with its own priority or requirements.

2-Scheduling Criteria: Scheduling algorithms use specific criteria to decide which task to execute next.
  The criteria may include factors such as priority, the amount of CPU time required, the deadline for completion, the amount of memory required, and more.
  Different scheduling algorithms may use different criteria.

3-Dispatcher: The scheduler, which is part of the operating system, is responsible for selecting the next task from the queue based on the scheduling criteria.
  The selected task is then dispatched for execution on the CPU.
  The dispatcher is the component that performs the actual context switch, saving the state of the current task and loading the state of the selected task into the CPU registers.

4-Preemptive vs. Non-preemptive: Scheduling algorithms can be either preemptive or non-preemptive.
  Preemptive scheduling allows a higher-priority task to interrupt the execution of a lower-priority task, whereas non-preemptive scheduling completes the execution of the current task before selecting a new one.

5-Types of Scheduling Algorithms: There are various scheduling algorithms designed to meet different goals. Some common scheduling algorithms include:
  1-First-Come-First-Served (FCFS): The first task in the queue is executed first.
  2-Shortest Job Next (SJN) or Shortest Job First (SJF): The task with the smallest execution time is executed next.
  3-Round Robin (RR): Each task is given a fixed time quantum to execute in a cyclic manner.
  4-Priority Scheduling: Tasks are assigned priorities, and the one with the highest priority is executed first.
  5-Multilevel Queue Scheduling: Tasks are grouped into multiple queues, each with a different priority, and tasks are selected from the highest-priority queue.
  6-Multilevel Feedback Queue Scheduling: Similar to multilevel queue scheduling, but tasks can move between queues based on their behavior.

6-Performance Evaluation: Scheduling algorithms are evaluated based on various performance metrics, such as throughput, turnaround time, waiting time, response time, and fairness.
  The choice of scheduling algorithm depends on the specific requirements of the system and the goals of the operating system


Task 2: Watch a video on YouTube about solving problems with stacks.
https://www.youtube.com/watch?v=O1KeXo8lE8A&t=504s


Task 3: Everything about red black tree.
Red-Black tree is a binary search tree in which every node is colored with either red or black.
It is a type of self balancing binary search tree. It has a good efficient worst case running time complexity.
Properties of Red Black Tree:
                             1- Root property: The root is black.
                             2- External property: Every leaf (Leaf is a NULL child of a node) is black in Red-Black tree.
                             3- Internal property: The children of a red node are black. Hence possible parent of red node is a black node.
                             4- Depth property: All the leaves have the same black depth.
                             5-Path property: Every simple path from root to descendant leaf node contains same number of black nodes. 
Rules That Every Red-Black Tree Follows: 
                                        1-Every node has a color either red or black.
                                        2-The root of the tree is always black.
                                        3-There are no two adjacent red nodes (A red node cannot have a red parent or red child).
                                        4-Every path from a node (including root) to any of its descendants NULL nodes has the same number of black nodes.
                                        5-Every leaf (e.i. NULL node) must be colored BLACK.


Task 4: what is Hash-map?
A hash map, also known as a hash table, is a data structure that stores key-value pairs and provides efficient lookup, insertion, and deletion operations.
It is a fundamental data structure in computer science and is used in various programming languages and applications to implement associative arrays, dictionaries, and sets.


Task 5: What is the 13 rules to write a clean code?

#General rules:
                1-Follow standard conventions.
                2-Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible.
                3-Boy scout rule. Leave the campground cleaner than you found it.
                4-Always find root cause. Always look for the root cause of a problem.
#Design rules:
              1-Keep configurable data at high levels.
              2-Prefer polymorphism to if/else or switch/case.
              3-Separate multi-threading code.
              4-Prevent over-configurability.
              5-Use dependency injection.
              6-Follow Law of Demeter. A class should know only its direct dependencies.
#Understandability tips:
                        1-Be consistent. If you do something a certain way, do all similar things in the same way.
                        2-Use explanatory variables.
                        3-Encapsulate boundary conditions. Boundary conditions are hard to keep track of. Put the processing for them in one place.
                        4-Prefer dedicated value objects to primitive type.
                        5-Avoid logical dependency. Don't write methods which works correctly depending on something else in the same class.
                        6-Avoid negative conditionals.
#Names rules:
             1-Choose descriptive and unambiguous names.
             2-Make meaningful distinction.
             3-Use pronounceable names.
             4-Use searchable names.
             5-Replace magic numbers with named constants.
             6-Avoid encodings. Don't append prefixes or type information.
#Functions rules:
                 1-Small.
                 2-Do one thing.
                 3-Use descriptive names.
                 4-Prefer fewer arguments.
                 5-Have no side effects.
                 6-Don't use flag arguments. Split method into several independent methods that can be called from the client without the flag.
#Comments rules:
                1-Always try to explain yourself in code.
                2-Don't be redundant.
                3-Don't add obvious noise.
                4-Don't use closing brace comments.
                5-Don't comment out code. Just remove.
                6-Use as explanation of intent.
                7-Use as clarification of code.
                8-Use as warning of consequences.
#Source code structure:
                       1-Separate concepts vertically.
                       2-Related code should appear vertically dense.
                       3-Declare variables close to their usage.
                       4-Dependent functions should be close.
                       5-Similar functions should be close.
                       6-Place functions in the downward direction.
                       7-Keep lines short.
                       8-Don't use horizontal alignment.
                       9-Use white space to associate related things and disassociate weakly related.
                       10-Don't break indentation.
#Objects and data structures:
                             1-Hide internal structure.
                             2-Prefer data structures.
                             3-Avoid hybrids structures (half object and half data).
                             4-Should be small.
                             5-Do one thing.
                             6-Small number of instance variables.
                             7-Base class should know nothing about their derivatives.
                             8-Better to have many functions than to pass some code into a function to select a behavior.
                             9-Prefer non-static methods to static methods.
#Tests:
       1-One assert per test.
       2-Readable.
       3-Fast.
       4-Independent.
       5-Repeatable.
#Code smells:
             1-Rigidity. The software is difficult to change. A small change causes a cascade of subsequent changes.
             2-Fragility. The software breaks in many places due to a single change.
             3-Immobility. You cannot reuse parts of the code in other projects because of involved risks and high effort.
             4-Needless Complexity.
             5-Needless Repetition.
             6-Opacity. The code is hard to understand.
